#+TITLE: Git basics

* git internals: commits, trees & blobs.

git cat-file -p b1314d99959cfb31b46cfb3ff6b61ed69eba11b1 => commit
git cat-file -p 05755f45e56b77595d8d28668402d674d6c97d8b => tree
git cat-file -p 65c99f780903e84a066531281c72640242025cfb => blob

let's commit this.

we get:

** exercise 1:
what is the content of secret.txt?
git cat-file -p ad12e281e300fdb4fcffad5260579803f0064e0c

** history
cat .git/HEAD
cat .git/refs/heads/master

history is a linked list of commits that each reference a tree.

* everyday commands
** init & clone
git init
=> create a new repo
git clone git@github.com:besport/git-course
** inspection
git status
=> shows you the state of the repository
git branch
=> shows you local branches
git branch -a
=> shows you all branches
*** log
git log
=> list of commits
git log --stat
=> list of commits with file modification statistics
git log --patch
=> list of commits with patches
*** git diff
git diff --stat branch
=> shows file stats to from current tree to branch
git diff branch
=> shows patch between current tree & branch
git diff branch_1..branch_2
git diff HEAD^..branch_2
git diff branch_x..a1234
=> diff between different git revisions which can be HEAD (relative to current tree history), <commit hash>, branch name, tag name.
**** exercise 2
how many lines is the diff between commit 35c81 and branch_1?
hint: use wc -l
** checkout
git checkout <exisiting-branch-name>
=> checks out tree corresponding to that branch
git checkout -b <new-branch>
=> creates new branch starting from current tree
** staging
staging: it's a temporary space in which you prepare your commit
git add <file>
=> adds all modifications of file to staging.
git add --interactive
=> choose individual hunks (patches) to commit
git reset
=> removes everything from staging
** committing
git commit
=> commits the current staging with $EDITOR for commit message.
git commit -m "[doc] explain everything"
=> commits the current staging to a commit with -m message
git commit -a -m "[doc] explain commits"
=> this creates a new commit after adding all modifications to staging
see: [[https://github.com/besport/bs/wiki/Coding-style][bs coding style/commit format]]
** misc
git reset --hard
=> removes all modifications

* workflow
All features should be developed in a branch created for it.
That means you never commit on master.

** simple fetch, create, push
git fetch <remote>
=> fetches remotes branches and stores them in branches named remote/branches
git fetch
=> fetch from origin
git checkout master
=> go to your local master
git merge origin/master
=> merge origin/master in master, they should now have the exact same history

these steps can be done with git pull.
careful not to do so in a local branch which could break your commit history.

git checkout -b new_feature
=> create a branch from master
<code things and commit>
git add -i
git commit ...
git push
=> pushes your branch with local name as destination name:
git push origin new_feature:new_feature
full syntax:
git push origin local_branch_name:remote_destination_branch_name
** github: pull requests
you do not push on master
you push on a new branch
description is important
commit history is important
you do not merge your own branch
** old branch needs to be updated
git fetch
=> fetch from origin
git checkout old_feature
=> go to your out of date branch
git rebase origin/master
=> replays your commits on top of origin/master
*** exercise 3
git checkout old_master
create your own branch from here: git checkout -b <name_ex3>
add a file in answers/<your name>.txt
add the answers to exercise 1 & 2 on separate lines:
1: answer1
2: answer2
commit
rebase on top of origin/master
create a pull request
** rebasing for a prettier history
git checkout dirty_branch
git log
=> choose commit from which rebasing will start
git rebase -i cb82502e5a83cc8faa04ee0f0ec8c3c350d2c91c
=> edit commits
common actions:
reword: use commit, but edit the commit message
edit: use commit, but stop for amending
squash: use commit, but meld into previous commit
fixup: like "squash", but discard this commit's log message
drop: remove commit

we want to remove [remove me] add debug
[code] calc answer (not working?)
we do not want to keep the broken state in the history, we want to add fix:
[fix] fix the answer!
to form a single commit "[code] calc answer"
*** exercise 4
once the rebase is done how long is the diff of the two last commits:
git diff HEAD^^..HEAD


* remotes
git remote add github git@github.com:besport/git-course.git
* rebasing

* cherry picking
* fetch vs pull
* push
* tag
